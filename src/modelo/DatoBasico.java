package modelo;

// Generated 16/12/2011 03:51:27 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * DatoBasico generated by hbm2java
 */
@Entity
@Table(name = "dato_basico")
public class DatoBasico implements java.io.Serializable {

	private String codigoDatoBasico;
	private TipoDato tipoDato;
	private DatoBasico datoBasico;
	private String nombre;
	private String descripcion;
	private char estatus;
	private Date fechaRegistro;
	private String responsable;
	private Date horaRegistro;
	private Set<FamiliarJugador> familiarJugadors = new HashSet<FamiliarJugador>(
			0);
	private Set<Indicador> indicadorsForCodigoTipo = new HashSet<Indicador>(0);
	private Set<DatoBasico> datoBasicos = new HashSet<DatoBasico>(0);
	private Set<Jugador> jugadors = new HashSet<Jugador>(0);
	private Set<Liga> ligas = new HashSet<Liga>(0);
	private Set<RosterCompetencia> rosterCompetenciasForCodigoJugadorClave = new HashSet<RosterCompetencia>(
			0);
	private Set<UmpireJuego> umpireJuegosForCodigoUmpire = new HashSet<UmpireJuego>(
			0);
	private Set<Equipo> equipos = new HashSet<Equipo>(0);
	private Set<Persona> personas = new HashSet<Persona>(0);
	private Set<Indicador> indicadorsForCodigoModalidad = new HashSet<Indicador>(
			0);
	private Set<PersonalJuego> personalJuegos = new HashSet<PersonalJuego>(0);
	private Set<TipoCompetencia> tipoCompetencias = new HashSet<TipoCompetencia>(
			0);
	private Set<Competencia> competenciasForCodigoTipo = new HashSet<Competencia>(
			0);
	private Set<Competencia> competenciasForCodigoOrganizacion = new HashSet<Competencia>(
			0);
	private Set<TipoCompetencia> tipoCompetencias_1 = new HashSet<TipoCompetencia>(
			0);
	private Set<JugadorClave> jugadorClaves = new HashSet<JugadorClave>(0);
	private Set<Estadio> estadios = new HashSet<Estadio>(0);
	private Set<Familiar> familiars = new HashSet<Familiar>(0);
	private Set<Regla> reglas = new HashSet<Regla>(0);
	private Set<JugadorForaneo> jugadorForaneos = new HashSet<JugadorForaneo>(0);
	private Set<Competencia> competenciasForCodigoEstado = new HashSet<Competencia>(
			0);
	private Set<RosterCompetencia> rosterCompetenciasForCodigoTipoJugador = new HashSet<RosterCompetencia>(
			0);
	private Set<UmpireJuego> umpireJuegosForCodigoPosicion = new HashSet<UmpireJuego>(
			0);
	private Set<LineUp> lineUpsForCodigoPosicion = new HashSet<LineUp>(0);
	private Set<LineUp> lineUpsForCodigoTipoMencion = new HashSet<LineUp>(0);
	private Set<Juego> juegos = new HashSet<Juego>(0);
	private Set<Juego> juegos_1 = new HashSet<Juego>(0);

	public DatoBasico() {
	}

	public DatoBasico(String codigoDatoBasico, TipoDato tipoDato,
			DatoBasico datoBasico, String nombre, String descripcion,
			char estatus, Date fechaRegistro, String responsable,
			Date horaRegistro) {
		this.codigoDatoBasico = codigoDatoBasico;
		this.tipoDato = tipoDato;
		this.datoBasico = datoBasico;
		this.nombre = nombre;
		this.descripcion = descripcion;
		this.estatus = estatus;
		this.fechaRegistro = fechaRegistro;
		this.responsable = responsable;
		this.horaRegistro = horaRegistro;
	}

	public DatoBasico(String codigoDatoBasico, TipoDato tipoDato,
			DatoBasico datoBasico, String nombre, String descripcion,
			char estatus, Date fechaRegistro, String responsable,
			Date horaRegistro, Set<FamiliarJugador> familiarJugadors,
			Set<Indicador> indicadorsForCodigoTipo,
			Set<DatoBasico> datoBasicos, Set<Jugador> jugadors,
			Set<Liga> ligas,
			Set<RosterCompetencia> rosterCompetenciasForCodigoJugadorClave,
			Set<UmpireJuego> umpireJuegosForCodigoUmpire, Set<Equipo> equipos,
			Set<Persona> personas, Set<Indicador> indicadorsForCodigoModalidad,
			Set<PersonalJuego> personalJuegos,
			Set<TipoCompetencia> tipoCompetencias,
			Set<Competencia> competenciasForCodigoTipo,
			Set<Competencia> competenciasForCodigoOrganizacion,
			Set<TipoCompetencia> tipoCompetencias_1,
			Set<JugadorClave> jugadorClaves, Set<Estadio> estadios,
			Set<Familiar> familiars, Set<Regla> reglas,
			Set<JugadorForaneo> jugadorForaneos,
			Set<Competencia> competenciasForCodigoEstado,
			Set<RosterCompetencia> rosterCompetenciasForCodigoTipoJugador,
			Set<UmpireJuego> umpireJuegosForCodigoPosicion,
			Set<LineUp> lineUpsForCodigoPosicion,
			Set<LineUp> lineUpsForCodigoTipoMencion, Set<Juego> juegos,
			Set<Juego> juegos_1) {
		this.codigoDatoBasico = codigoDatoBasico;
		this.tipoDato = tipoDato;
		this.datoBasico = datoBasico;
		this.nombre = nombre;
		this.descripcion = descripcion;
		this.estatus = estatus;
		this.fechaRegistro = fechaRegistro;
		this.responsable = responsable;
		this.horaRegistro = horaRegistro;
		this.familiarJugadors = familiarJugadors;
		this.indicadorsForCodigoTipo = indicadorsForCodigoTipo;
		this.datoBasicos = datoBasicos;
		this.jugadors = jugadors;
		this.ligas = ligas;
		this.rosterCompetenciasForCodigoJugadorClave = rosterCompetenciasForCodigoJugadorClave;
		this.umpireJuegosForCodigoUmpire = umpireJuegosForCodigoUmpire;
		this.equipos = equipos;
		this.personas = personas;
		this.indicadorsForCodigoModalidad = indicadorsForCodigoModalidad;
		this.personalJuegos = personalJuegos;
		this.tipoCompetencias = tipoCompetencias;
		this.competenciasForCodigoTipo = competenciasForCodigoTipo;
		this.competenciasForCodigoOrganizacion = competenciasForCodigoOrganizacion;
		this.tipoCompetencias_1 = tipoCompetencias_1;
		this.jugadorClaves = jugadorClaves;
		this.estadios = estadios;
		this.familiars = familiars;
		this.reglas = reglas;
		this.jugadorForaneos = jugadorForaneos;
		this.competenciasForCodigoEstado = competenciasForCodigoEstado;
		this.rosterCompetenciasForCodigoTipoJugador = rosterCompetenciasForCodigoTipoJugador;
		this.umpireJuegosForCodigoPosicion = umpireJuegosForCodigoPosicion;
		this.lineUpsForCodigoPosicion = lineUpsForCodigoPosicion;
		this.lineUpsForCodigoTipoMencion = lineUpsForCodigoTipoMencion;
		this.juegos = juegos;
		this.juegos_1 = juegos_1;
	}

	@Id
	@Column(name = "codigo_dato_basico", unique = true, nullable = false)
	public String getCodigoDatoBasico() {
		return this.codigoDatoBasico;
	}

	public void setCodigoDatoBasico(String codigoDatoBasico) {
		this.codigoDatoBasico = codigoDatoBasico;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "codigo_tipo_dato", nullable = false)
	public TipoDato getTipoDato() {
		return this.tipoDato;
	}

	public void setTipoDato(TipoDato tipoDato) {
		this.tipoDato = tipoDato;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_codigo_dato_basico", nullable = false)
	public DatoBasico getDatoBasico() {
		return this.datoBasico;
	}

	public void setDatoBasico(DatoBasico datoBasico) {
		this.datoBasico = datoBasico;
	}

	@Column(name = "nombre", nullable = false)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "descripcion", nullable = false)
	public String getDescripcion() {
		return this.descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	@Column(name = "estatus", nullable = false, length = 1)
	public char getEstatus() {
		return this.estatus;
	}

	public void setEstatus(char estatus) {
		this.estatus = estatus;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "fecha_registro", nullable = false, length = 13)
	public Date getFechaRegistro() {
		return this.fechaRegistro;
	}

	public void setFechaRegistro(Date fechaRegistro) {
		this.fechaRegistro = fechaRegistro;
	}

	@Column(name = "responsable", nullable = false)
	public String getResponsable() {
		return this.responsable;
	}

	public void setResponsable(String responsable) {
		this.responsable = responsable;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "hora_registro", nullable = false, length = 15)
	public Date getHoraRegistro() {
		return this.horaRegistro;
	}

	public void setHoraRegistro(Date horaRegistro) {
		this.horaRegistro = horaRegistro;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<FamiliarJugador> getFamiliarJugadors() {
		return this.familiarJugadors;
	}

	public void setFamiliarJugadors(Set<FamiliarJugador> familiarJugadors) {
		this.familiarJugadors = familiarJugadors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipo")
	public Set<Indicador> getIndicadorsForCodigoTipo() {
		return this.indicadorsForCodigoTipo;
	}

	public void setIndicadorsForCodigoTipo(
			Set<Indicador> indicadorsForCodigoTipo) {
		this.indicadorsForCodigoTipo = indicadorsForCodigoTipo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<DatoBasico> getDatoBasicos() {
		return this.datoBasicos;
	}

	public void setDatoBasicos(Set<DatoBasico> datoBasicos) {
		this.datoBasicos = datoBasicos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Jugador> getJugadors() {
		return this.jugadors;
	}

	public void setJugadors(Set<Jugador> jugadors) {
		this.jugadors = jugadors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Liga> getLigas() {
		return this.ligas;
	}

	public void setLigas(Set<Liga> ligas) {
		this.ligas = ligas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoJugadorClave")
	public Set<RosterCompetencia> getRosterCompetenciasForCodigoJugadorClave() {
		return this.rosterCompetenciasForCodigoJugadorClave;
	}

	public void setRosterCompetenciasForCodigoJugadorClave(
			Set<RosterCompetencia> rosterCompetenciasForCodigoJugadorClave) {
		this.rosterCompetenciasForCodigoJugadorClave = rosterCompetenciasForCodigoJugadorClave;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoUmpire")
	public Set<UmpireJuego> getUmpireJuegosForCodigoUmpire() {
		return this.umpireJuegosForCodigoUmpire;
	}

	public void setUmpireJuegosForCodigoUmpire(
			Set<UmpireJuego> umpireJuegosForCodigoUmpire) {
		this.umpireJuegosForCodigoUmpire = umpireJuegosForCodigoUmpire;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Equipo> getEquipos() {
		return this.equipos;
	}

	public void setEquipos(Set<Equipo> equipos) {
		this.equipos = equipos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Persona> getPersonas() {
		return this.personas;
	}

	public void setPersonas(Set<Persona> personas) {
		this.personas = personas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoModalidad")
	public Set<Indicador> getIndicadorsForCodigoModalidad() {
		return this.indicadorsForCodigoModalidad;
	}

	public void setIndicadorsForCodigoModalidad(
			Set<Indicador> indicadorsForCodigoModalidad) {
		this.indicadorsForCodigoModalidad = indicadorsForCodigoModalidad;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<PersonalJuego> getPersonalJuegos() {
		return this.personalJuegos;
	}

	public void setPersonalJuegos(Set<PersonalJuego> personalJuegos) {
		this.personalJuegos = personalJuegos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<TipoCompetencia> getTipoCompetencias() {
		return this.tipoCompetencias;
	}

	public void setTipoCompetencias(Set<TipoCompetencia> tipoCompetencias) {
		this.tipoCompetencias = tipoCompetencias;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipo")
	public Set<Competencia> getCompetenciasForCodigoTipo() {
		return this.competenciasForCodigoTipo;
	}

	public void setCompetenciasForCodigoTipo(
			Set<Competencia> competenciasForCodigoTipo) {
		this.competenciasForCodigoTipo = competenciasForCodigoTipo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoOrganizacion")
	public Set<Competencia> getCompetenciasForCodigoOrganizacion() {
		return this.competenciasForCodigoOrganizacion;
	}

	public void setCompetenciasForCodigoOrganizacion(
			Set<Competencia> competenciasForCodigoOrganizacion) {
		this.competenciasForCodigoOrganizacion = competenciasForCodigoOrganizacion;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "condicion_competencia", joinColumns = { @JoinColumn(name = "codigo_condicion", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "codigo_tipo_competencia_condicion", nullable = false, updatable = false) })
	public Set<TipoCompetencia> getTipoCompetencias_1() {
		return this.tipoCompetencias_1;
	}

	public void setTipoCompetencias_1(Set<TipoCompetencia> tipoCompetencias_1) {
		this.tipoCompetencias_1 = tipoCompetencias_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<JugadorClave> getJugadorClaves() {
		return this.jugadorClaves;
	}

	public void setJugadorClaves(Set<JugadorClave> jugadorClaves) {
		this.jugadorClaves = jugadorClaves;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Estadio> getEstadios() {
		return this.estadios;
	}

	public void setEstadios(Set<Estadio> estadios) {
		this.estadios = estadios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Familiar> getFamiliars() {
		return this.familiars;
	}

	public void setFamiliars(Set<Familiar> familiars) {
		this.familiars = familiars;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Regla> getReglas() {
		return this.reglas;
	}

	public void setReglas(Set<Regla> reglas) {
		this.reglas = reglas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<JugadorForaneo> getJugadorForaneos() {
		return this.jugadorForaneos;
	}

	public void setJugadorForaneos(Set<JugadorForaneo> jugadorForaneos) {
		this.jugadorForaneos = jugadorForaneos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoEstado")
	public Set<Competencia> getCompetenciasForCodigoEstado() {
		return this.competenciasForCodigoEstado;
	}

	public void setCompetenciasForCodigoEstado(
			Set<Competencia> competenciasForCodigoEstado) {
		this.competenciasForCodigoEstado = competenciasForCodigoEstado;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoJugador")
	public Set<RosterCompetencia> getRosterCompetenciasForCodigoTipoJugador() {
		return this.rosterCompetenciasForCodigoTipoJugador;
	}

	public void setRosterCompetenciasForCodigoTipoJugador(
			Set<RosterCompetencia> rosterCompetenciasForCodigoTipoJugador) {
		this.rosterCompetenciasForCodigoTipoJugador = rosterCompetenciasForCodigoTipoJugador;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoPosicion")
	public Set<UmpireJuego> getUmpireJuegosForCodigoPosicion() {
		return this.umpireJuegosForCodigoPosicion;
	}

	public void setUmpireJuegosForCodigoPosicion(
			Set<UmpireJuego> umpireJuegosForCodigoPosicion) {
		this.umpireJuegosForCodigoPosicion = umpireJuegosForCodigoPosicion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoPosicion")
	public Set<LineUp> getLineUpsForCodigoPosicion() {
		return this.lineUpsForCodigoPosicion;
	}

	public void setLineUpsForCodigoPosicion(Set<LineUp> lineUpsForCodigoPosicion) {
		this.lineUpsForCodigoPosicion = lineUpsForCodigoPosicion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasicoByCodigoTipoMencion")
	public Set<LineUp> getLineUpsForCodigoTipoMencion() {
		return this.lineUpsForCodigoTipoMencion;
	}

	public void setLineUpsForCodigoTipoMencion(
			Set<LineUp> lineUpsForCodigoTipoMencion) {
		this.lineUpsForCodigoTipoMencion = lineUpsForCodigoTipoMencion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "datoBasico")
	public Set<Juego> getJuegos() {
		return this.juegos;
	}

	public void setJuegos(Set<Juego> juegos) {
		this.juegos = juegos;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "anotador_juego", joinColumns = { @JoinColumn(name = "codigo_anotador", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "codigo_juego_competencia", nullable = false, updatable = false) })
	public Set<Juego> getJuegos_1() {
		return this.juegos_1;
	}

	public void setJuegos_1(Set<Juego> juegos_1) {
		this.juegos_1 = juegos_1;
	}

}
